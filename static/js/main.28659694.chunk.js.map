{"version":3,"sources":["components/EmojiComponent.js","App.js","reportWebVitals.js","index.js"],"names":["Emoji","emoji","description","keywords","useState","showCopied","setShowCopied","tooltipOpen","setTooltipOpen","className","id","onClick","e","setTimeout","data-clipboard-text","data-keywords","Tooltip","placement","isOpen","target","toggle","role","aria-label","App","emojiListCopy","unicodeEmoji","emojiList","setEmojiList","emojiSearchQuery","setEmojiSearchQuery","useEffect","clipboard","Clipboard","destroy","doSearch","queriedEmojiList","searchKeywordArray","toLowerCase","trim","split","console","clear","forEach","keyword","searchKeyword","indexOf","push","type","placeholder","value","onChange","slice","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAgCeA,EA7BD,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SAAc,EACZC,oBAAS,GADG,mBACzCC,EADyC,KAC7BC,EAD6B,OAEVF,oBAAS,GAFC,mBAEzCG,EAFyC,KAE5BC,EAF4B,KAWhD,OACE,sBAAKC,UAAU,QACbC,GAAIT,EACJU,QARgB,SAAAC,GAClBN,GAAc,GACdO,YAAW,kBAAMP,GAAc,KAAQ,MAOrCQ,sBAAqBb,EACrBc,gBAAeZ,EAJjB,UAME,cAACa,EAAA,EAAD,CAASC,UAAU,QAAQC,OAAQX,EAAaY,OAAQlB,EAAOmB,OAdpD,kBAAMZ,GAAgBD,IAcjC,SACIF,EACA,sBAAMI,UAAU,eAAhB,+CACA,sBAAMA,UAAU,aAAhB,+CAGJ,sBAAMY,KAAK,MAAMC,aAAYpB,EAA7B,SAA2CD,Q,yBCuDlCsB,MA1Ef,WAEE,IAAMC,EAAgBC,MAFT,EAGoBrB,mBAASoB,GAH7B,mBAGPE,EAHO,KAGIC,EAHJ,OAIkCvB,mBAAS,IAJ3C,mBAIPwB,EAJO,KAIWC,EAJX,KAMbC,qBAAU,WACR,IAAMC,EAAY,IAAIC,IAAU,UAChC,OAAO,WACHD,EAAUE,cAIhBH,qBAAU,WACRI,MACC,CAACN,IAEJ,IAAMM,EAAW,WACf,GAAwB,KAArBN,EACDD,EAAaH,OAEV,CACH,IAAIW,EAAmB,GACnBC,EAAqB,GACzBA,EAAqBR,EAAiBS,cAAcC,OAAOC,MAAM,KACjEC,QAAQC,QACRjB,EAAckB,SAAQ,SAACzC,GACrBA,EAAME,SAASuC,SAAQ,SAACC,GACtBP,EAAmBM,SAAQ,SAACE,GACvBD,EAAQN,cAAcQ,QAAQD,IAAkB,GACjDT,EAAiBW,KAAK7C,YAK9B0B,EAAaQ,KAIjB,OACE,sBAAK1B,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,qBAAf,SACE,kEAKV,sBAAKA,UAAU,YAAf,UACI,sBAAKA,UAAU,wCAAf,UACI,qBAAKA,UAAU,WAAf,SACE,uBAAOsC,KAAK,OAAOtC,UAAU,eAC7BuC,YAAY,yBAAyBtC,GAAG,SACxCuC,MAAOrB,EACPsB,SAAU,SAACtC,GAAD,OAAOiB,EAAoBjB,EAAEO,OAAO8B,YAEhD,qBAAKxC,UAAU,4BAAf,SACE,wBAAQA,UAAU,oCAClBE,QAAS,kBAAMkB,EAAoB,KADnC,+BAIN,qBAAKpB,UAAU,MAAf,SACIiB,EAAUyB,MAAM,EAAE,KAAKC,KAAI,SAACnD,GAAD,OAC7B,qBAAKQ,UAAU,oDAAf,SACE,cAAC,EAAD,CAAyBR,MAAOA,EAAMA,MAAOC,YAAaD,EAAMC,aAApDD,EAAMA,qBC9DjBoD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.28659694.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { Tooltip } from 'reactstrap';\r\n\r\nconst Emoji = ({emoji, description, keywords}) => {\r\n  const [showCopied, setShowCopied] = useState(false);\r\n  const [tooltipOpen, setTooltipOpen] = useState(false);\r\n\r\n  const toggle = () => setTooltipOpen(!tooltipOpen);\r\n\r\n  const handleClick = e => {\r\n    setShowCopied(true)\r\n    setTimeout(() => setShowCopied(false), 3000)\r\n  }\r\n\r\n  return (\r\n    <div className=\"emoji\"      \r\n      id={emoji}\r\n      onClick={handleClick}\r\n      data-clipboard-text={emoji}\r\n      data-keywords={keywords}\r\n    >\r\n      <Tooltip placement=\"right\" isOpen={tooltipOpen} target={emoji} toggle={toggle}>\r\n        { showCopied ? \r\n          <span className=\"text-success\">Copied To Clipoard ! ðŸ“‹</span>:\r\n          <span className=\"text-light\">Copy To Clipboard! ðŸ“‹</span>\r\n        }\r\n      </Tooltip>\r\n      <span role=\"img\" aria-label={description}>{emoji}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Emoji;\r\n","import { useEffect, useState } from 'react';\nimport './App.css';\nimport Emoji from \"./components/EmojiComponent\";\nimport Clipboard from 'clipboard';\nimport * as unicodeEmoji from 'unicode-emoji';\n\n\n\nfunction App() {\n  \n  const emojiListCopy = unicodeEmoji.getEmojis();\n  const[emojiList, setEmojiList] = useState(emojiListCopy);\n  const[emojiSearchQuery, setEmojiSearchQuery] = useState(\"\");\n\n  useEffect(() => {\n    const clipboard = new Clipboard(\".emoji\");\n    return () => {\n        clipboard.destroy();\n    };\n  });\n\n  useEffect(() => {\n    doSearch();\n  }, [emojiSearchQuery]);\n  \n  const doSearch = () => {\n    if(emojiSearchQuery === \"\") {\n      setEmojiList(emojiListCopy);\n    }\n    else {\n      var queriedEmojiList = [];\n      var searchKeywordArray = [];\n      searchKeywordArray = emojiSearchQuery.toLowerCase().trim().split(\" \");\n      console.clear();\n      emojiListCopy.forEach((emoji) => {\n        emoji.keywords.forEach((keyword) => {\n          searchKeywordArray.forEach((searchKeyword) => {\n            if(keyword.toLowerCase().indexOf(searchKeyword) >= 0){\n              queriedEmojiList.push(emoji);\n            }\n          });\n        });\n      });\n      setEmojiList(queriedEmojiList);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"jumbotron\">\n          <div className=\"container\">       \n            <div className=\"row\">\n              <div className=\"col-12 text-center\">\n                <h2>Emoji Search Application</h2>\n              </div>\n            </div>\n          </div>\n      </div>\n      <div className=\"container\">\n          <div className=\"row d-flex justify-content-center p-5\">\n              <div className=\"col-md-9\">\n                <input type=\"text\" className=\"form-control\"\n                placeholder=\"Search for a keyword..\" id=\"search\"\n                value={emojiSearchQuery}\n                onChange={(e) => setEmojiSearchQuery(e.target.value)}/>\n              </div>\n              <div className=\"py-3 py-md-0 col col-md-3\">\n                <button className=\"btn btn-block btn-outline-primary\" \n                onClick={() => setEmojiSearchQuery(\"\")}>Clear Search</button>\n              </div>\n          </div>          \n          <div className=\"row\">\n            { emojiList.slice(0,100).map((emoji) => \n            <div className=\"col-6 col-md-2 py-4 d-flex justify-content-center\">\n              <Emoji key={emoji.emoji} emoji={emoji.emoji} description={emoji.description}/>\n          </div>) }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}