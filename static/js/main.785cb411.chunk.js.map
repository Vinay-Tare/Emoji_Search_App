{"version":3,"sources":["components/HeaderComponent.js","components/EmojiComponent.js","App.js","reportWebVitals.js","index.js"],"names":["Header","emojiSearchQuery","setEmojiSearchQuery","className","Jumbotron","Container","Row","Col","md","Input","type","placeholder","id","value","onChange","e","target","Button","outline","color","block","onClick","Emoji","emoji","description","keywords","useState","showCopied","setShowCopied","tooltipOpen","setTooltipOpen","setTimeout","data-clipboard-text","data-keywords","Tooltip","placement","isOpen","toggle","role","aria-label","App","emojiListCopy","unicodeEmoji","emojiList","setEmojiList","useEffect","clipboard","Clipboard","destroy","doSearch","queriedEmojiList","searchKeywordArray","toLowerCase","trim","split","console","clear","forEach","keyword","searchKeyword","indexOf","push","slice","map","xs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.785cb411.chunk.js","sourcesContent":["import { Jumbotron, Input, Button, Container, Row, Col } from \"reactstrap\";\r\n\r\nfunction Header({ emojiSearchQuery, setEmojiSearchQuery }) {\r\n  return (\r\n    <div className=\"header\">\r\n      <Jumbotron>\r\n        <Container>\r\n          <Row>\r\n            <Col className=\"text-center\">\r\n              <h2>Emoji Search Application</h2>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <Row className=\"p-4\">\r\n          <Col md=\"9\">\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"Search for a keyword..\"\r\n              id=\"search\"\r\n              value={emojiSearchQuery}\r\n              onChange={(e) => setEmojiSearchQuery(e.target.value)}\r\n            />\r\n          </Col>\r\n          <Col md=\"3\" className=\"py-3 py-md-0\">\r\n            <Button\r\n              outline\r\n              color=\"primary\"\r\n              block\r\n              onClick={() => setEmojiSearchQuery(\"\")}\r\n            >\r\n              Clear Search\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import { useState } from \"react\";\r\nimport { Tooltip } from 'reactstrap';\r\n\r\nconst Emoji = ({emoji, description, keywords}) => {\r\n  const [showCopied, setShowCopied] = useState(false);\r\n  const [tooltipOpen, setTooltipOpen] = useState(false);\r\n\r\n  const toggle = () => setTooltipOpen(!tooltipOpen);\r\n\r\n  const handleClick = e => {\r\n    setShowCopied(true)\r\n    setTimeout(() => setShowCopied(false), 3000)\r\n  }\r\n\r\n  return (\r\n    <div className=\"emoji\"      \r\n      id={emoji}\r\n      onClick={handleClick}\r\n      data-clipboard-text={emoji}\r\n      data-keywords={keywords}\r\n    >\r\n      <Tooltip placement=\"right\" isOpen={tooltipOpen} target={emoji} toggle={toggle}>\r\n        { showCopied ? \r\n          <span className=\"text-success\">Copied To Clipoard ! ðŸ“‹</span>:\r\n          <span className=\"text-light\">Copy To Clipboard! ðŸ“‹</span>\r\n        }\r\n      </Tooltip>\r\n      <span role=\"img\" aria-label={description}>{emoji}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Emoji;\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Clipboard from \"clipboard\";\nimport * as unicodeEmoji from \"unicode-emoji\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport Header from \"./components/HeaderComponent\";\nimport Emoji from \"./components/EmojiComponent\";\n\nfunction App() {\n  const emojiListCopy = unicodeEmoji.getEmojis();\n  const [emojiList, setEmojiList] = useState(emojiListCopy);\n  const [emojiSearchQuery, setEmojiSearchQuery] = useState(\"\");\n\n  useEffect(() => {\n    const clipboard = new Clipboard(\".emoji\");\n    return () => {\n      clipboard.destroy();\n    };\n  });\n\n  useEffect(() => {\n    doSearch();\n  }, [emojiSearchQuery]);\n\n  const doSearch = () => {\n    if (emojiSearchQuery === \"\") {\n      setEmojiList(emojiListCopy);\n    } else {\n      var queriedEmojiList = [];\n      var searchKeywordArray = [];\n      searchKeywordArray = emojiSearchQuery.toLowerCase().trim().split(\" \");\n      console.clear();\n      emojiListCopy.forEach((emoji) => {\n        emoji.keywords.forEach((keyword) => {\n          searchKeywordArray.forEach((searchKeyword) => {\n            if (keyword.toLowerCase().indexOf(searchKeyword) >= 0) {\n              queriedEmojiList.push(emoji);\n            }\n          });\n        });\n      });\n      setEmojiList(queriedEmojiList);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header\n        emojiSearchQuery={emojiSearchQuery}\n        setEmojiSearchQuery={setEmojiSearchQuery}\n      />\n      <Container>\n        <Row>\n          {emojiList.slice(0, 100).map((emoji) => (\n            <Col xs=\"6\" md=\"2\" className=\"py-4 d-flex justify-content-center\">\n              <Emoji\n                key={emoji.emoji}\n                emoji={emoji.emoji}\n                description={emoji.description}\n              />\n            </Col>\n          ))}\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}